// Dashboard modul - hlavn√≠ panel s dla≈ædicemi
window.Dashboard = (function() {
    'use strict';

    let draggedElement = null;

    // Dla≈ædice pro hlavn√≠ panel
    const dashboardTiles = [
        { id: 'byty-prehled', icon: 'üèòÔ∏è', title: 'Byty ‚Äì p≈ôehled', tags: ['#byty', '#nemovitosti'], desc: 'Souhrn jednotek, obsazenost, n√°jemn√©' },
        { id: 'najemnici', icon: 'üë•', title: 'N√°jemn√≠ci', tags: ['#najemnici'], desc: 'Seznam osob + kontakty' },
        { id: 'smlouvy', icon: 'üìÑ', title: 'Smlouvy', tags: ['#smlouvy'], desc: 'Aktivn√≠ / konƒç√≠c√≠ smlouvy' },
        { id: 'cashflow', icon: 'üí∞', title: 'Cashflow', tags: ['#finance'], desc: 'N√°jemn√©, z√°lohy, nedoplatky' },
        { id: 'udrzba', icon: 'üîß', title: '√ödr≈æba', tags: ['#udrzba'], desc: 'Opravy, po≈æadavky, SLA' },
        { id: 'revize', icon: 'üõ†Ô∏è', title: 'Revize', tags: ['#revize'], desc: 'Plynov√©, elektro, kom√≠ny‚Ä¶' },
        { id: 'integrace', icon: 'üîó', title: 'Integrace', tags: ['#integrace', '#nastaveni'], desc: 'ARES, e-maily, exporty' },
        { id: 'volne-byty', icon: 'üè¢', title: 'Voln√© byty', tags: ['#volne', '#byty'], desc: 'Marketing a inzerce' },
        { id: 'pozadavky', icon: 'üìù', title: 'Po≈æadavky n√°jemn√≠k≈Ø', tags: ['#pozadavky', '#udrzba'], desc: 'P≈ô√≠choz√≠ hl√°≈°en√≠ z√°vad' },
        { id: 'vyuctovani', icon: 'üßæ', title: 'Vy√∫ƒçtov√°n√≠ slu≈æeb', tags: ['#vyuctovani', '#finance'], desc: 'Voda, teplo, tepl√° voda‚Ä¶' },
        { id: 'dluznici', icon: 'üí∏', title: 'Dlu≈æn√≠ci', tags: ['#dluhy', '#finance'], desc: 'P≈ôehled nedoplatk≈Ø' },
        { id: 'meridla', icon: 'üîã', title: 'Mƒõ≈ôidla a odeƒçty', tags: ['#energie'], desc: 'Evidence mƒõ≈ôidel, odeƒçty' },
        { id: 'spotreby', icon: 'üìä', title: 'Spot≈ôeby a grafy', tags: ['#spotreby', '#energie'], desc: 'Vizualizace energi√≠' },
        { id: 'dokumenty', icon: 'üìÅ', title: 'Dokumenty', tags: ['#dokumenty'], desc: 'Slo≈æky, ≈°ablony, archiv' },
        { id: 'reporty', icon: 'üìë', title: 'Reporty a exporty', tags: ['#reporty'], desc: 'CSV, PDF, √∫ƒçetnictv√≠' },
        { id: 'komunikace', icon: '‚úâÔ∏è', title: 'E-maily & SMS', tags: ['#komunikace'], desc: 'Hromadn√° i c√≠len√° komunikace' },
        { id: 'ukonceni', icon: 'üîö', title: 'Ukonƒçen√≠ n√°jm≈Ø', tags: ['#ukonceni', '#smlouvy'], desc: 'V√Ωpovƒõdi, p≈ôevzet√≠, p≈ôed√°vac√≠ protokoly' }
    ];

    // Render hlavn√≠ho dashboardu
    function render() {
        const container = document.getElementById('main-content');
        if (!container) return;

        // Z√≠skat obl√≠ben√© dla≈ædice
        const favorites = dashboardTiles.filter(tile => AppState.isFavorite(tile.id));
        const others = dashboardTiles.filter(tile => !AppState.isFavorite(tile.id));

        let html = `
            <div class="dashboard-header">
                <h1>Hlavn√≠ panel</h1>
                <p class="dashboard-subtitle">Rychl√Ω p≈ô√≠stup k d≈Øle≈æit√Ωm funkc√≠m</p>
            </div>
        `;

        // Sekce obl√≠ben√Ωch
        if (favorites.length > 0) {
            html += `
                <div class="favorites-section">
                    <h2>‚≠ê Obl√≠ben√©</h2>
                    <div class="dashboard-tiles" id="favorites-tiles">
                        ${renderTiles(favorites, true)}
                    </div>
                </div>
            `;
        }

        // V≈°echny dla≈ædice
        html += `
            <div class="all-section">
                <h2 style="margin: 20px;">üì¶ V≈°echny moduly</h2>
                <div class="dashboard-tiles" id="all-tiles">
                    ${renderTiles(others, false)}
                </div>
            </div>
        `;

        container.innerHTML = html;

        // Inicializace event handler≈Ø
        initializeEventHandlers();
        initializeDragAndDrop();

        // Nastavit stav
        if (window.AppState) {
            AppState.set('currentModule', 'dashboard');
        }
    }

    // Render dla≈ædic
    function renderTiles(tiles, inFavorites) {
        const tilesOrder = AppState.getTilesOrder();
        
        // Se≈ôadit podle ulo≈æen√©ho po≈ôad√≠
        const sortedTiles = [...tiles].sort((a, b) => {
            const orderA = tilesOrder[a.id] || 999;
            const orderB = tilesOrder[b.id] || 999;
            return orderA - orderB;
        });

        return sortedTiles.map((tile, index) => `
            <div class="tile${AppState.isFavorite(tile.id) ? ' is-favorite' : ''}" 
                 data-tile-id="${tile.id}" 
                 data-order="${tilesOrder[tile.id] || index}"
                 draggable="true">
                <button class="favorite-button${AppState.isFavorite(tile.id) ? ' active' : ''}" 
                        data-tile-id="${tile.id}"
                        title="${AppState.isFavorite(tile.id) ? 'Odebrat z obl√≠ben√Ωch' : 'P≈ôidat do obl√≠ben√Ωch'}">
                    <span class="favorite-icon">‚≠ê</span>
                </button>
                <div class="tile-title">
                    <span class="tile-icon">${tile.icon}</span>
                    ${tile.title}
                </div>
                <div class="tile-tags">
                    ${tile.tags.map(tag => `<span class="tile-tag">${tag}</span>`).join('')}
                </div>
                <div class="tile-desc">${tile.desc}</div>
            </div>
        `).join('');
    }

    // Inicializace event handler≈Ø
    function initializeEventHandlers() {
        // Obl√≠ben√© tlaƒç√≠tka
        document.querySelectorAll('.favorite-button').forEach(btn => {
            btn.addEventListener('click', function(e) {
                e.stopPropagation();
                const tileId = this.dataset.tileId;
                const isFavorite = AppState.toggleFavorite(tileId);
                
                App.showToast(
                    isFavorite ? 'P≈ôid√°no do obl√≠ben√Ωch' : 'Odebr√°no z obl√≠ben√Ωch', 
                    'info'
                );
                
                // P≈ôekreslit dashboard
                render();
            });
        });

        // Kliknut√≠ na dla≈ædice
        document.querySelectorAll('.tile').forEach(tile => {
            tile.addEventListener('click', function(e) {
                if (!e.target.closest('.favorite-button')) {
                    const tileId = this.dataset.tileId;
                    const tileData = dashboardTiles.find(t => t.id === tileId);
                    console.log('Kliknuto na dla≈ædici:', tileData.title);
                    // TODO: Navigace na p≈ô√≠slu≈°n√Ω modul
                }
            });
        });
    }

    // Inicializace drag & drop
    function initializeDragAndDrop() {
        const tiles = document.querySelectorAll('.tile');
        
        tiles.forEach(tile => {
            tile.addEventListener('dragstart', handleDragStart);
            tile.addEventListener('dragend', handleDragEnd);
            tile.addEventListener('dragover', handleDragOver);
            tile.addEventListener('drop', handleDrop);
            tile.addEventListener('dragenter', handleDragEnter);
            tile.addEventListener('dragleave', handleDragLeave);
        });
    }

    // Drag & drop handlery
    function handleDragStart(e) {
        draggedElement = this;
        this.classList.add('dragging');
        e.dataTransfer.effectAllowed = 'move';
    }

    function handleDragEnd(e) {
        this.classList.remove('dragging');
        
        // Ulo≈æit nov√© po≈ôad√≠
        saveTilesOrder();
    }

    function handleDragOver(e) {
        if (e.preventDefault) {
            e.preventDefault();
        }
        e.dataTransfer.dropEffect = 'move';
        return false;
    }

    function handleDragEnter(e) {
        this.classList.add('drag-over');
    }

    function handleDragLeave(e) {
        this.classList.remove('drag-over');
    }

    function handleDrop(e) {
        if (e.stopPropagation) {
            e.stopPropagation();
        }
        
        this.classList.remove('drag-over');
        
        if (draggedElement !== this) {
            // Prohoƒè dla≈ædice
            const container = this.parentNode;
            const allTiles = [...container.children];
            const draggedIndex = allTiles.indexOf(draggedElement);
            const targetIndex = allTiles.indexOf(this);
            
            if (draggedIndex < targetIndex) {
                container.insertBefore(draggedElement, this.nextSibling);
            } else {
                container.insertBefore(draggedElement, this);
            }
        }
        
        return false;
    }

    // Ulo≈æen√≠ po≈ôad√≠ dla≈ædic
    function saveTilesOrder() {
        const order = {};
        document.querySelectorAll('.tile').forEach((tile, index) => {
            order[tile.dataset.tileId] = index;
        });
        AppState.saveTilesOrder(order);
    }

    // Ve≈ôejn√© API
    return {
        render
    };
})();
