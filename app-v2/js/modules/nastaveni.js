// Modul Nastaven√≠
window.Nastaveni = (function() {
    'use strict';
    
    const moduleName = 'nastaveni';
    const moduleTitle = 'Nastaven√≠';
    
    // T√©mata aplikace
    const themes = [
        { id: 'dark', name: 'Tmav√Ω', icon: 'üåô', primary: '#1e293b' },
        { id: 'light', name: 'Svƒõtl√Ω', icon: '‚òÄÔ∏è', primary: '#ffffff' },
        { id: 'blue', name: 'Modr√Ω akcent', icon: 'üíô', primary: '#5292f7' },
        { id: 'green', name: 'Zelen√Ω akcent', icon: 'üíö', primary: '#22c55e' },
        { id: 'purple', name: 'Fialov√Ω akcent', icon: 'üíú', primary: '#a855f7' }
    ];
    
    function renderOverview() {
        return `
            <div class="module-header">
                <h2>‚öôÔ∏è ${moduleTitle}</h2>
            </div>
            
            <div class="module-content">
                <div class="settings-sections">
                    <div class="settings-card">
                        <h3>üè¢ Informace o firmƒõ</h3>
                        <div class="settings-form">
                            <div class="form-group">
                                <label>N√°zev firmy</label>
                                <input type="text" value="Moje pron√°jmy s.r.o." class="form-control">
                            </div>
                            <div class="form-group">
                                <label>IƒåO</label>
                                <input type="text" value="12345678" class="form-control">
                            </div>
                            <button class="btn btn-primary">Ulo≈æit zmƒõny</button>
                        </div>
                    </div>
                    
                    <div class="settings-card">
                        <h3>üìã ƒå√≠seln√≠ky</h3>
                        <div class="settings-links">
                            <a href="#" class="settings-link">Typy nemovitost√≠</a>
                            <a href="#" class="settings-link">Typy slu≈æeb</a>
                            <a href="#" class="settings-link">Sazby DPH</a>
                            <a href="#" class="settings-link">Mƒõny</a>
                        </div>
                    </div>
                    
                    <div class="settings-card">
                        <h3>üìÑ ≈†ablony dokument≈Ø</h3>
                        <div class="settings-links">
                            <a href="#" class="settings-link">N√°jemn√≠ smlouva</a>
                            <a href="#" class="settings-link">P≈ôed√°vac√≠ protokol</a>
                            <a href="#" class="settings-link">Upom√≠nka</a>
                            <a href="#" class="settings-link">Vy√∫ƒçtov√°n√≠ slu≈æeb</a>
                        </div>
                    </div>
                    
                    <div class="settings-card">
                        <h3>üíæ Z√°lohov√°n√≠</h3>
                        <p>Posledn√≠ z√°loha: Dnes 03:00</p>
                        <div class="backup-actions">
                            <button class="btn btn-primary">Vytvo≈ôit z√°lohu</button>
                            <button class="btn btn-secondary">Obnovit ze z√°lohy</button>
                        </div>
                    </div>
                    
                    <div class="settings-card">
                        <h3>üîÑ Import/Export</h3>
                        <div class="import-export-actions">
                            <button class="btn btn-secondary">üì• Import dat</button>
                            <button class="btn btn-secondary">üì§ Export dat</button>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }
    
    function renderVzhled() {
        const currentTheme = AppState.get('theme') || 'dark';
        const compactMode = AppState.get('compactMode') || false;
        const animations = AppState.get('animations') !== false;
        
        return `
            <div class="module-header">
                <h2>üé® Nastaven√≠ - Vzhled</h2>
            </div>
            
            <div class="module-content">
                <div class="appearance-settings">
                    <div class="settings-card">
                        <h3>üé® Barevn√© t√©ma</h3>
                        <p>Vyberte si barevn√© sch√©ma, kter√© v√°m vyhovuje</p>
                        
                        <div class="theme-grid">
                            ${themes.map(theme => `
                                <div class="theme-option ${currentTheme === theme.id ? 'active' : ''}" 
                                     onclick="Nastaveni.setTheme('${theme.id}')">
                                    <div class="theme-preview" style="background: ${theme.primary}">
                                        <span class="theme-icon">${theme.icon}</span>
                                    </div>
                                    <span class="theme-name">${theme.name}</span>
                                </div>
                            `).join('')}
                        </div>
                    </div>
                    
                    <div class="settings-card">
                        <h3>‚öôÔ∏è Mo≈ænosti zobrazen√≠</h3>
                        
                        <div class="settings-options">
                            <label class="checkbox-label">
                                <input type="checkbox" id="compactMode" ${compactMode ? 'checked' : ''} 
                                       onchange="Nastaveni.toggleCompactMode()">
                                <span>Kompaktn√≠ re≈æim</span>
                                <small>Zmen≈°√≠ mezery mezi prvky pro zobrazen√≠ v√≠ce obsahu</small>
                            </label>
                            
                            <label class="checkbox-label">
                                <input type="checkbox" id="animations" ${animations ? 'checked' : ''} 
                                       onchange="Nastaveni.toggleAnimations()">
                                <span>Animace</span>
                                <small>Plynul√© p≈ôechody a efekty p≈ôi interakci</small>
                            </label>
                            
                            <label class="checkbox-label">
                                <input type="checkbox" id="showTags" ${AppState.get('showTags') !== false ? 'checked' : ''} 
                                       onchange="Nastaveni.toggleTags()">
                                <span>Zobrazit hashtagy</span>
                                <small>Zobraz√≠ kategorie u dla≈ædiƒçek na hlavn√≠m panelu</small>
                            </label>
                        </div>
                    </div>
                    
                    <div class="settings-card">
                        <h3>üìè Velikost p√≠sma</h3>
                        <div class="font-size-selector">
                            <button class="btn btn-ghost" onclick="Nastaveni.setFontSize('small')">Mal√©</button>
                            <button class="btn btn-ghost active" onclick="Nastaveni.setFontSize('normal')">Norm√°ln√≠</button>
                            <button class="btn btn-ghost" onclick="Nastaveni.setFontSize('large')">Velk√©</button>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }
    
    // Nastaven√≠ t√©matu
    function setTheme(themeId) {
        // Odstra≈à v≈°echny theme t≈ô√≠dy
        document.body.className = document.body.className.replace(/theme-\w+/g, '');
        
        // P≈ôidej novou
        document.body.classList.add(`theme-${themeId}`);
        
        // Ulo≈æ do state
        AppState.set('theme', themeId);
        
        // Aktualizuj UI
        document.querySelectorAll('.theme-option').forEach(option => {
            option.classList.remove('active');
        });
        event.currentTarget.classList.add('active');
        
        App.showToast('T√©ma zmƒõnƒõno', 'success');
    }
    
    // P≈ôepnut√≠ kompaktn√≠ho re≈æimu
    function toggleCompactMode() {
        const isCompact = !AppState.get('compactMode');
        AppState.set('compactMode', isCompact);
        document.body.classList.toggle('compact-mode', isCompact);
        App.showToast(isCompact ? 'Kompaktn√≠ re≈æim zapnut' : 'Kompaktn√≠ re≈æim vypnut', 'info');
    }
    
    // P≈ôepnut√≠ animac√≠
    function toggleAnimations() {
        const enabled = !AppState.get('animations');
        AppState.set('animations', enabled);
        document.body.classList.toggle('no-animations', !enabled);
        App.showToast(enabled ? 'Animace zapnuty' : 'Animace vypnuty', 'info');
    }
    
    // P≈ôepnut√≠ hashtag≈Ø
    function toggleTags() {
        const show = !AppState.get('showTags');
        AppState.set('showTags', show);
        App.showToast(show ? 'Hashtagy zobrazeny' : 'Hashtagy skryty', 'info');
        
        // Pokud jsme na hlavn√≠m panelu, aktualizuj ho
        if (!AppState.get('currentModule')) {
            DashboardTiles.renderDashboard();
        }
    }
    
    // Nastaven√≠ velikosti p√≠sma
    function setFontSize(size) {
        document.body.classList.remove('font-small', 'font-normal', 'font-large');
        document.body.classList.add(`font-${size}`);
        AppState.set('fontSize', size);
        
        // Aktualizuj tlaƒç√≠tka
        document.querySelectorAll('.font-size-selector button').forEach(btn => {
            btn.classList.remove('active');
        });
        event.currentTarget.classList.add('active');
    }
    
    return {
        render(type = 'all') {
            const container = document.getElementById('mainContent');
            if (!container) return;
            
            switch(type) {
                case 'vzhled':
                    container.innerHTML = renderVzhled();
                    break;
                case 'all':
                default:
                    container.innerHTML = renderOverview();
            }
        },
        
        setTheme,
        toggleCompactMode,
        toggleAnimations,
        toggleTags,
        setFontSize
    };
})();
